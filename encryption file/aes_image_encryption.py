from Crypto.Cipher import AES
import os
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
load_dotenv()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
SECRET_KEY = os.getenv("SECRET_KEY")
IV = os.getenv("IV")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
if SECRET_KEY is None or IV is None:
    raise ValueError("‚ùå SECRET_KEY ‡∏´‡∏£‡∏∑‡∏≠ IV ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô .env ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\nSECRET_KEY=your32bytekey\nIV=your16byteiv")

SECRET_KEY = SECRET_KEY.encode()[:32]  # 32-byte Key
IV = IV.encode()[:16]  # 16-byte IV

print(f"üîë Key Length: {len(SECRET_KEY)} bytes")
print(f"üîπ IV Length: {len(IV)} bytes")

def encrypt_image(input_file, output_file):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    if not os.path.exists(input_file):
        raise FileNotFoundError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {input_file}")

    cipher = AES.new(SECRET_KEY, AES.MODE_CBC, IV)

    with open(input_file, "rb") as f:
        file_data = f.read()

    # ‡πÄ‡∏ï‡∏¥‡∏° Padding ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á 16 ‡πÑ‡∏ö‡∏ï‡πå
    padding = 16 - (len(file_data) % 16)
    file_data += bytes([padding]) * padding

    encrypted_data = cipher.encrypt(file_data)

    with open(output_file, "wb") as f:
        f.write(encrypted_data)

    print(f"üîê ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß: {output_file}")

def decrypt_image(input_file, output_file):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    if not os.path.exists(input_file):
        raise FileNotFoundError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {input_file}")

    cipher = AES.new(SECRET_KEY, AES.MODE_CBC, IV)

    with open(input_file, "rb") as f:
        encrypted_data = f.read()

    decrypted_data = cipher.decrypt(encrypted_data)

    # ‡∏•‡∏ö Padding ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏ß‡πâ
    padding = decrypted_data[-1]
    decrypted_data = decrypted_data[:-padding]

    with open(output_file, "wb") as f:
        f.write(decrypted_data)

    print(f"üîì ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß: {output_file}")

if __name__ == "__main__":
    # ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏ò‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    base_path = "/home/nb-anuchida/Desktop/encryption-project-test-main/encryption file/"
    input_file = os.path.join(base_path, "exam_01.jpg")
    encrypted_file = os.path.join(base_path, "exam_01_encrypted.bin")
    decrypted_file = os.path.join(base_path, "exam_01_decoded.jpg")

    encrypt_image(input_file, encrypted_file)
    decrypt_image(encrypted_file, decrypted_file)
